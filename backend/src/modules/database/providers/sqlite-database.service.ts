import { Injectable, Logger } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import { YamlConfigService } from '../../../config/yaml-config.service';
import { IDatabaseConnection, DatabaseInfo } from '../interfaces';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 *
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IDatabaseConnection –¥–ª—è SQLite.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏,
 * –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
 *
 * ‚ö†Ô∏è –í–∞–∂–Ω–æ: –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è DatabaseService (Facade),
 * –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç onModuleInit() —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
 *
 * üí° URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ —á–µ—Ä–µ–∑ datasourceUrl,
 * –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
 *
 * @class SqliteDatabaseService
 * @implements {IDatabaseConnection}
 */
@Injectable()
export class SqliteDatabaseService implements IDatabaseConnection {
  private readonly config: Record<string, unknown>;
  private isConnected = false;
  private logger: Logger;
  private _prisma: PrismaClient;

  constructor(private readonly configService: YamlConfigService) {
    const config = configService.getConfig();

    // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∑–∞–¥–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const databaseUrl =
      (config as { app: { database: { sqlite_params: { url: string } } } }).app.database
        .sqlite_params?.url || 'file:./storage/database/database.sqlite';

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Prisma
    process.env.DATABASE_URL = databaseUrl;

    this._prisma = new PrismaClient({
      datasourceUrl: databaseUrl,
    });

    this.config = config;
    this.logger = new Logger(SqliteDatabaseService.name);
    console.debug(`SQLite datasource URL: ${databaseUrl}`);
  }

  get prisma(): PrismaClient {
    return this._prisma;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   *
   * @param {number} retryCount - —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
   * @returns {Promise<void>}
   * @throws {Error} –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã
   */
  private async connectWithRetry(retryCount = 1): Promise<void> {
    const { maxRetries, retryDelay } = (
      this.config as {
        app: { database: { connection: { maxRetries: number; retryDelay: number } } };
      }
    ).app.database.connection;

    try {
      await this._prisma.$connect();
      this.isConnected = true;
      this.logger.log(`SQLite database connected successfully on attempt ${retryCount}`);
    } catch (error) {
      this.logger.error(`SQLite database connection attempt ${retryCount} failed`, error);

      if (retryCount < maxRetries) {
        this.logger.warn(
          `Retrying SQLite database connection in ${retryDelay}ms... (${retryCount}/${maxRetries})`,
        );
        await this.delay(retryDelay);
        return this.connectWithRetry(retryCount + 1);
      }

      this.logger.error(`SQLite database connection failed after ${maxRetries} attempts`);
      throw new Error(
        `SQLite database connection failed after ${maxRetries} attempts: ${error instanceof Error ? error.message : String(error)}`,
      );
    }
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   *
   * @param {number} ms - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
   * @returns {Promise<void>}
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async onModuleInit(): Promise<void> {
    await this.connectWithRetry();
  }

  async onModuleDestroy(): Promise<void> {
    if (this.isConnected) {
      try {
        await this._prisma.$disconnect();
        this.isConnected = false;
        this.logger.log('SQLite database disconnected successfully');
      } catch (error) {
        this.logger.error('Failed to disconnect from SQLite database', error);
      }
    }
  }

  async healthCheck(): Promise<boolean> {
    if (!this.isConnected) {
      this.logger.warn('SQLite database is not connected');
      return false;
    }

    try {
      await this._prisma.$queryRaw`SELECT 1`;
      return true;
    } catch (error) {
      this.logger.error('SQLite database health check failed', error);
      this.isConnected = false;
      return false;
    }
  }

  getDatabaseInfo(): DatabaseInfo {
    return {
      driver: 'sqlite',
      connected: this.isConnected,
      config: (this.config as { app: { database: Record<string, unknown> } }).app.database,
    };
  }

  async reconnect(): Promise<void> {
    this.logger.log('Attempting to reconnect to SQLite database...');
    this.isConnected = false;
    await this.connectWithRetry();
  }
}
