import { Module, Global, OnModuleInit, Logger } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ConfigModule } from '../../config/config.module';
import { YamlConfigService } from '../../config/yaml-config.service';
import { Avatar } from '../avatar/avatar.entity';
import { DatabaseService } from './database.service';
import { DatabaseDriverFactory } from './utils/driver-factory';
import { SqliteDriverService, PostgreSQLDriverService } from './drivers';

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ TypeORM
 *
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç TypeORM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
 * (PostgreSQL, SQLite) –Ω–∞ –æ—Å–Ω–æ–≤–µ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 *
 * @example
 * ```typescript
 * // –í –ª—é–±–æ–º –º–æ–¥—É–ª–µ
 * @Module({
 *   imports: [DatabaseModule],
 * })
 * export class FeatureModule {}
 *
 * // –í —Å–µ—Ä–≤–∏—Å–µ
 * @Injectable()
 * export class MyService {
 *   constructor(private readonly db: DatabaseService) {}
 *
 *   async getData() {
 *     return await this.db.avatar.find();
 *   }
 * }
 * ```
 */
@Global()
@Module({
  imports: [
    ConfigModule,
    TypeOrmModule.forRootAsync({
      imports: [ConfigModule],
      useFactory: (configService: YamlConfigService, driverFactory: DatabaseDriverFactory) => {
        // –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const driver = driverFactory.createDriver(configService);

        // –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –¥—Ä–∞–π–≤–µ—Ä
        const typeormConfig = driver.buildConfigs(configService);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        typeormConfig.entities = [Avatar];

        return typeormConfig as any;
      },
      inject: [YamlConfigService, DatabaseDriverFactory],
    }),
    TypeOrmModule.forFeature([Avatar]),
  ],
  providers: [DatabaseService, DatabaseDriverFactory, SqliteDriverService, PostgreSQLDriverService],
  exports: [DatabaseService, TypeOrmModule, DatabaseDriverFactory],
})
export class DatabaseModule implements OnModuleInit {
  private readonly logger = new Logger(DatabaseModule.name);

  constructor(private readonly databaseService: DatabaseService) {}

  async onModuleInit(): Promise<void> {
    try {
      const dbInfo = this.databaseService.getDatabaseInfo();
      this.logger.log(`üóÑÔ∏è  DatabaseModule initialized - ${dbInfo.driver} provider active`);
    } catch (error) {
      this.logger.error(`DatabaseModule initialization failed: ${error.message}`);
      throw error;
    }
  }
}
