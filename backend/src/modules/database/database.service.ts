import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, DataSource } from 'typeorm';
import { Avatar } from './entities/avatar.entity';
import { YamlConfigService } from '../../config/yaml-config.service';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ TypeORM
 *
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö,
 * –∏—Å–ø–æ–ª—å–∑—É—è TypeORM Repository pattern. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
 * —Å –ª—é–±—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL, SQLite).
 *
 * @class DatabaseService
 * @implements {OnModuleInit}
 * @implements {OnModuleDestroy}
 */
@Injectable()
export class DatabaseService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(DatabaseService.name);

  constructor(
    @InjectRepository(Avatar)
    private readonly avatarRepository: Repository<Avatar>,
    private readonly dataSource: DataSource,
    private readonly configService: YamlConfigService,
  ) {}

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async onModuleInit(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (!this.dataSource.isInitialized) {
        await this.dataSource.initialize();
      }

      const driver = this.configService.getConfig().app.database.driver;
      this.logger.log(`üóÑÔ∏è  DatabaseService initialized - ${driver} provider active`);
    } catch (error) {
      this.logger.error(`DatabaseService initialization failed: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –º–æ–¥—É–ª—è
   */
  async onModuleDestroy(): Promise<void> {
    try {
      if (this.dataSource.isInitialized) {
        await this.dataSource.destroy();
        this.logger.log('Database connection closed');
      }
    } catch (error) {
      this.logger.error(`Error closing database connection: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
   */
  get avatar(): Repository<Avatar> {
    return this.avatarRepository;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   *
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
   */
  async healthCheck(): Promise<boolean> {
    try {
      await this.dataSource.query('SELECT 1');
      return true;
    } catch (error) {
      this.logger.error(`Database health check failed: ${error.message}`);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   *
   * @returns {object} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  getDatabaseInfo(): { driver: string; isConnected: boolean; databaseName?: string } {
    const config = this.configService.getConfig();
    const driver = config.app.database.driver;
    
    return {
      driver,
      isConnected: this.dataSource.isInitialized,
      databaseName: config.app.database.network?.database || config.app.database.sqlite_params?.url,
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   *
   * @returns {Promise<void>}
   */
  async reconnect(): Promise<void> {
    try {
      if (this.dataSource.isInitialized) {
        await this.dataSource.destroy();
      }
      await this.dataSource.initialize();
      this.logger.log('Database reconnected successfully');
    } catch (error) {
      this.logger.error(`Database reconnection failed: ${error.message}`);
      throw error;
    }
  }
}