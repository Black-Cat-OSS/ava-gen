#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ [Unreleased] –≤ CHANGELOG.md
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç changelog –¥–ª—è –Ω–µ—Ä–µ–ª–∏–∑–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
 */

const CHANGELOG_PATH = path.join(__dirname, '..', 'CHANGELOG.md');

function generateUnreleasedChangelog() {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º changelog –¥–ª—è unreleased –∫–æ–º–º–∏—Ç–æ–≤
    const output = execSync('npx conventional-changelog -p conventionalcommits -u', { 
      encoding: 'utf8',
      cwd: path.join(__dirname, '..')
    });
    
    // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –≤–µ—Ä—Å–∏–µ–π –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const lines = output.trim().split('\n');
    const contentWithoutVersionHeader = lines.slice(1).join('\n').trim();
    
    return contentWithoutVersionHeader;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog:', error.message);
    process.exit(1);
  }
}

function updateChangelogFile(unreleasedContent) {
  try {
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    const changelogContent = fs.readFileSync(CHANGELOG_PATH, 'utf8');
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏—é [Unreleased]
    const unreleasedRegex = /## \[Unreleased\][\s\S]*?(?=## \[(?!Unreleased)|\Z)/;
    
    let newContent;
    if (unreleasedRegex.test(changelogContent)) {
      // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é [Unreleased]
      newContent = changelogContent.replace(
        unreleasedRegex,
        `## [Unreleased]\n\n${unreleasedContent.trim()}\n\n`
      );
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é [Unreleased] –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const headerEnd = changelogContent.indexOf('\n## [');
      if (headerEnd !== -1) {
        newContent = 
          changelogContent.substring(0, headerEnd) +
          '\n\n## [Unreleased]\n\n' + 
          unreleasedContent.trim() + 
          '\n\n' +
          changelogContent.substring(headerEnd);
      } else {
        newContent = changelogContent + '\n\n## [Unreleased]\n\n' + unreleasedContent.trim() + '\n\n';
      }
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(CHANGELOG_PATH, newContent, 'utf8');
    console.log('‚úÖ –°–µ–∫—Ü–∏—è [Unreleased] –≤ CHANGELOG.md –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ CHANGELOG.md:', error.message);
    process.exit(1);
  }
}


function main() {
  console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –¥–ª—è –Ω–µ—Ä–µ–ª–∏–∑–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
  
  const unreleasedContent = generateUnreleasedChangelog();
  
  if (!unreleasedContent || unreleasedContent.trim() === '') {
    console.log('‚ÑπÔ∏è  –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏—é [Unreleased]');
    return;
  }
  
  updateChangelogFile(unreleasedContent);
  console.log('üéâ Changelog —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
}

if (require.main === module) {
  main();
}

module.exports = { generateUnreleasedChangelog, updateChangelogFile };
