name: CI (Develop)

on:
  # Только PR в develop (feature/fix ветки) - быстрые тесты
  # Полные тесты запускаются в Production Deploy Pipeline при PR в main
  pull_request:
    branches:
      - develop
    types: [opened, synchronize, reopened]

  # Ручной запуск для тестирования
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-backend-${{ hashFiles('backend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-backend-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile


      - name: Run linter
        run: pnpm run lint

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-frontend-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-frontend-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

  test-backend-unit:
    name: Unit Tests (SQLite + Local)
    runs-on: ubuntu-latest
    needs: [lint-backend]
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-backend-${{ hashFiles('backend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-backend-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile


      - name: Run unit tests
        run: pnpm run test:unit
        env:
          NODE_ENV: test
          TEST_STORAGE_TYPE: local
          TEST_DB_DRIVER: sqlite

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/coverage/lcov.info
          flags: backend-unit
          name: backend-coverage-unit

  test-backend-integration:
    name: Integration Tests (PostgreSQL + MinIO)
    runs-on: ubuntu-latest
    needs: [lint-backend]
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend test image with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./backend/docker/Dockerfile
          target: builder
          push: false
          tags: avatar-gen-test-backend:builder
          cache-from: type=gha,scope=backend-test
          cache-to: type=gha,mode=max,scope=backend-test

      - name: Run integration tests with Docker Compose
        run: |
          # Устанавливаем переменные окружения для MinIO
          export TEST_STORAGE_TYPE=s3
          export TEST_S3_ENDPOINT=http://localhost:9000
          export TEST_S3_ACCESS_KEY=test-access-key
          export TEST_S3_SECRET_KEY=test-secret-key
          export TEST_S3_BUCKET=avatar-gen-test
          export TEST_S3_REGION=us-east-1
          
          # Устанавливаем переменные для PostgreSQL
          export TEST_DB_DRIVER=postgresql
          export TEST_DB_HOST=localhost
          export TEST_DB_PORT=5433
          export TEST_DB_NAME=avatar_gen_test
          export TEST_DB_USER=test_user
          export TEST_DB_PASSWORD=test_password
          
          # Запускаем integration тесты (используя предсобранный образ)
          docker compose -f docker/docker-compose.test-extended.yaml --profile integration-only up --abort-on-container-exit avatar-backend-integration

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/coverage/lcov.info
          flags: backend-integration
          name: backend-coverage-integration

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [lint-frontend]
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-frontend-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-frontend-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

  test-e2e:
    name: E2E Tests (Full Stack)
    runs-on: ubuntu-latest
    needs: [test-backend-unit, test-backend-integration, build-frontend]
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend test image with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./backend/docker/Dockerfile
          target: builder
          push: false
          tags: avatar-gen-test-backend:builder
          cache-from: type=gha,scope=backend-test
          cache-to: type=gha,mode=max,scope=backend-test

      - name: Build frontend test image with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./frontend/docker/Dockerfile
          push: false
          tags: avatar-gen-test-frontend:latest
          cache-from: type=gha,scope=frontend-test
          cache-to: type=gha,mode=max,scope=frontend-test

      - name: Build gateway test image with cache
        uses: docker/build-push-action@v6
        with:
          context: ./gateway
          file: ./gateway/Dockerfile
          push: false
          tags: avatar-gen-test-gateway:latest
          cache-from: type=gha,scope=gateway-test
          cache-to: type=gha,mode=max,scope=gateway-test

      - name: Run E2E tests with Docker Compose
        run: |
          # Устанавливаем переменные окружения для MinIO
          export TEST_STORAGE_TYPE=s3
          export TEST_S3_ENDPOINT=http://localhost:9000
          export TEST_S3_ACCESS_KEY=test-access-key
          export TEST_S3_SECRET_KEY=test-secret-key
          export TEST_S3_BUCKET=avatar-gen-test
          export TEST_S3_REGION=us-east-1
          
          # Устанавливаем переменные для PostgreSQL
          export TEST_DB_DRIVER=postgresql
          export TEST_DB_HOST=localhost
          export TEST_DB_PORT=5433
          export TEST_DB_NAME=avatar_gen_test
          export TEST_DB_USER=test_user
          export TEST_DB_PASSWORD=test_password
          
          # Запускаем E2E тесты через test runner
          docker compose -f docker/docker-compose.test-extended.yaml --profile e2e-only up --abort-on-container-exit --exit-code-from e2e-test-runner

  docker-build-test:
    name: Docker Build Test (Production Images)
    runs-on: ubuntu-latest
    needs: [test-e2e]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./backend/docker/Dockerfile
          target: production
          push: false
          tags: avatar-gen-backend:test
          cache-from: |
            type=gha,scope=backend-test
            type=gha,scope=backend-prod
          cache-to: type=gha,mode=max,scope=backend-prod

      - name: Build frontend production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./frontend/docker/Dockerfile
          target: production
          push: false
          tags: avatar-gen-frontend:test
          cache-from: |
            type=gha,scope=frontend-test
            type=gha,scope=frontend-prod
          cache-to: type=gha,mode=max,scope=frontend-prod

      - name: Build gateway image
        uses: docker/build-push-action@v6
        with:
          context: ./gateway
          file: ./gateway/Dockerfile
          push: false
          tags: avatar-gen-gateway:test
          cache-from: type=gha,scope=gateway-test
          cache-to: type=gha,scope=gateway-prod
