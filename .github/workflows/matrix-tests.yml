name: Matrix Tests

on:
  # Ручной запуск для полного матричного тестирования
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Тип тестов для запуска'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - matrix
      storage_types:
        description: 'Типы хранилища (через запятую)'
        required: false
        default: 'local,s3'
        type: string
      database_types:
        description: 'Типы базы данных (через запятую)'
        required: false
        default: 'sqlite,postgresql'
        type: string

  # Запуск при создании тега
  push:
    tags:
      - 'v*'

  # Запуск при PR в main (дополнительные тесты)
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  # ========================================
  # Unit Tests Matrix
  # ========================================
  unit-tests:
    name: Unit Tests (${{ matrix.storage }})
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_type == 'all' ||
      github.event.inputs.test_type == 'unit' ||
      github.event.inputs.test_type == ''
    strategy:
      fail-fast: false
      matrix:
        storage: [local]
        include:
          - storage: local
            test_name: 'Local Storage'
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-backend-${{ hashFiles('backend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-backend-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile


      - name: Run unit tests
        run: pnpm run test:unit
        env:
          NODE_ENV: test
          TEST_STORAGE_TYPE: ${{ matrix.storage }}
          TEST_DB_DRIVER: sqlite

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/coverage/lcov.info
          flags: unit-${{ matrix.storage }}
          name: unit-coverage-${{ matrix.storage }}

  # ========================================
  # Integration Tests Matrix
  # ========================================
  integration-tests:
    name: Integration Tests (${{ matrix.database }} + ${{ matrix.storage }})
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_type == 'all' ||
      github.event.inputs.test_type == 'integration' ||
      github.event.inputs.test_type == ''
    strategy:
      fail-fast: false
      matrix:
        database: [sqlite, postgresql]
        storage: [local, s3]
        include:
          - database: sqlite
            storage: local
            test_name: 'SQLite + Local'
          - database: sqlite
            storage: s3
            test_name: 'SQLite + S3'
          - database: postgresql
            storage: local
            test_name: 'PostgreSQL + Local'
          - database: postgresql
            storage: s3
            test_name: 'PostgreSQL + S3'
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run integration tests with Docker Compose
        run: |
          # Устанавливаем переменные окружения
          export TEST_STORAGE_TYPE=${{ matrix.storage }}
          export TEST_DB_DRIVER=${{ matrix.database }}
          
          if [ "${{ matrix.storage }}" = "s3" ]; then
            export TEST_S3_ENDPOINT=http://localhost:9000
            export TEST_S3_ACCESS_KEY=test-access-key
            export TEST_S3_SECRET_KEY=test-secret-key
            export TEST_S3_BUCKET=avatar-gen-test
            export TEST_S3_REGION=us-east-1
          fi
          
          if [ "${{ matrix.database }}" = "postgresql" ]; then
            export TEST_DB_HOST=localhost
            export TEST_DB_PORT=5433
            export TEST_DB_NAME=avatar_gen_test
            export TEST_DB_USER=test_user
            export TEST_DB_PASSWORD=test_password
          fi
          
          # Запускаем integration тесты
          docker compose -f docker/docker-compose.test.yaml --profile integration-tests up --build --abort-on-container-exit avatar-backend-integration

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/coverage/lcov.info
          flags: integration-${{ matrix.database }}-${{ matrix.storage }}
          name: integration-coverage-${{ matrix.database }}-${{ matrix.storage }}

  # ========================================
  # E2E Tests Matrix
  # ========================================
  e2e-tests:
    name: E2E Tests (${{ matrix.database }} + ${{ matrix.storage }})
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_type == 'all' ||
      github.event.inputs.test_type == 'e2e' ||
      github.event.inputs.test_type == ''
    strategy:
      fail-fast: false
      matrix:
        database: [postgresql]
        storage: [s3]
        include:
          - database: postgresql
            storage: s3
            test_name: 'PostgreSQL + S3 (Full Stack)'
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run E2E tests with Docker Compose
        run: |
          # Устанавливаем переменные окружения
          export TEST_STORAGE_TYPE=${{ matrix.storage }}
          export TEST_DB_DRIVER=${{ matrix.database }}
          
          if [ "${{ matrix.storage }}" = "s3" ]; then
            export TEST_S3_ENDPOINT=http://localhost:9000
            export TEST_S3_ACCESS_KEY=test-access-key
            export TEST_S3_SECRET_KEY=test-secret-key
            export TEST_S3_BUCKET=avatar-gen-test
            export TEST_S3_REGION=us-east-1
          fi
          
          if [ "${{ matrix.database }}" = "postgresql" ]; then
            export TEST_DB_HOST=localhost
            export TEST_DB_PORT=5433
            export TEST_DB_NAME=avatar_gen_test
            export TEST_DB_USER=test_user
            export TEST_DB_PASSWORD=test_password
          fi
          
          # Запускаем E2E тесты
          docker compose -f docker/docker-compose.test.yaml --profile e2e-tests up --build --abort-on-container-exit gateway-e2e

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/coverage/lcov.info
          flags: e2e-${{ matrix.database }}-${{ matrix.storage }}
          name: e2e-coverage-${{ matrix.database }}-${{ matrix.storage }}

  # ========================================
  # Custom Matrix Tests
  # ========================================
  custom-matrix-tests:
    name: Custom Matrix Tests (${{ matrix.database }} + ${{ matrix.storage }})
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.test_type == 'matrix' ||
      (github.event.inputs.storage_types != '' && github.event.inputs.database_types != '')
    strategy:
      fail-fast: false
      matrix:
        database: ${{ fromJson(format('[{0}]', join(split(github.event.inputs.database_types || 'sqlite,postgresql', ','), '","'))) }}
        storage: ${{ fromJson(format('[{0}]', join(split(github.event.inputs.storage_types || 'local,s3', ','), '","'))) }}
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run custom matrix tests with Docker Compose
        run: |
          # Устанавливаем переменные окружения
          export TEST_STORAGE_TYPE=${{ matrix.storage }}
          export TEST_DB_DRIVER=${{ matrix.database }}
          
          if [ "${{ matrix.storage }}" = "s3" ]; then
            export TEST_S3_ENDPOINT=http://localhost:9000
            export TEST_S3_ACCESS_KEY=test-access-key
            export TEST_S3_SECRET_KEY=test-secret-key
            export TEST_S3_BUCKET=avatar-gen-test
            export TEST_S3_REGION=us-east-1
          fi
          
          if [ "${{ matrix.database }}" = "postgresql" ]; then
            export TEST_DB_HOST=localhost
            export TEST_DB_PORT=5433
            export TEST_DB_NAME=avatar_gen_test
            export TEST_DB_USER=test_user
            export TEST_DB_PASSWORD=test_password
          fi
          
          # Запускаем матричные тесты
          docker compose -f docker/docker-compose.test.yaml --profile matrix-tests up --build --abort-on-container-exit test-runner

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/coverage/lcov.info
          flags: matrix-${{ matrix.database }}-${{ matrix.storage }}
          name: matrix-coverage-${{ matrix.database }}-${{ matrix.storage }}

  # ========================================
  # Test Summary
  # ========================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, custom-matrix-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" = "success" ]; then
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "| Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Integration Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-tests.result }}" = "success" ]; then
            echo "| E2E Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| E2E Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.custom-matrix-tests.result }}" = "success" ]; then
            echo "| Custom Matrix Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.custom-matrix-tests.result }}" = "skipped" ]; then
            echo "| Custom Matrix Tests | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Custom Matrix Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports are available in the individual test jobs above." >> $GITHUB_STEP_SUMMARY
