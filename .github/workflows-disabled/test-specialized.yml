name: Specialized Tests

on:
  # Ручной запуск
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Тип специализированных тестов'
        required: true
        type: choice
        options:
          - postgres
          - s3
          - performance
          - matrix
      config_custom:
        description: 'Кастомные переменные окружения (JSON)'
        required: false
        type: string
        default: '{}'

  # Запуск при изменении специализированных конфигураций
  push:
    paths:
      - 'backend/configs/settings.test.postgres.yaml'
      - 'backend/configs/settings.test.s3.yaml'
      - 'backend/configs/settings.test.minio.yaml'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  postgres-tests:
    name: PostgreSQL Specialized Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'postgres' || github.event.inputs.test_type == ''
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run PostgreSQL specialized tests
        run: |
          echo "🐘 Запуск PostgreSQL-специфичных тестов..."

          # Устанавливаем переменные окружения для PostgreSQL
          export TEST_DB_DRIVER=postgresql
          export TEST_DB_HOST=localhost
          export TEST_DB_PORT=5433
          export TEST_DB_NAME=avatar_gen_test
          export TEST_DB_USER=test_user
          export TEST_DB_PASSWORD=test_password
          export TEST_STORAGE_TYPE=local

          # Запускаем PostgreSQL-специфичные тесты
          docker compose -f docker/docker-compose.test-extended.yaml --profile postgres-tests up --build --abort-on-container-exit avatar-backend-postgres

          echo "✅ PostgreSQL тесты завершены"

      - name: Collect test results
        if: always()
        run: |
          docker compose -f docker/docker-compose.test-extended.yaml logs avatar-backend-postgres > postgres-test-results.log

          echo "## 🐘 PostgreSQL Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Database: PostgreSQL" >> $GITHUB_STEP_SUMMARY
          echo "- Storage: Local filesystem" >> $GITHUB_STEP_SUMMARY
          echo "- Config: settings.test.postgres.yaml" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker/docker-compose.test-extended.yaml --profile postgres-tests down --remove-orphans

  s3-tests:
    name: S3/MinIO Specialized Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 's3' || github.event.inputs.test_type == ''
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run S3/MinIO specialized tests
        run: |
          echo "☁️ Запуск S3/MinIO-специфичных тестов..."

          # Устанавливаем переменные окружения для S3
          export TEST_STORAGE_TYPE=s3
          export TEST_S3_ENDPOINT=http://localhost:9000
          export TEST_S3_ACCESS_KEY=test-access-key
          export TEST_S3_SECRET_KEY=test-secret-key
          export TEST_S3_BUCKET=avatar-gen-test
          export TEST_S3_REGION=us-east-1
          export TEST_DB_DRIVER=sqlite

          # Запускаем S3-специфичные тесты
          docker compose -f docker/docker-compose.test-extended.yaml --profile s3-tests up --build --abort-on-container-exit avatar-backend-s3

          echo "✅ S3 тесты завершены"

      - name: Collect test results
        if: always()
        run: |
          docker compose -f docker/docker-compose.test-extended.yaml logs avatar-backend-s3 > s3-test-results.log

          echo "## ☁️ S3/MinIO Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Storage: S3/MinIO" >> $GITHUB_STEP_SUMMARY
          echo "- Database: SQLite" >> $GITHUB_STEP_SUMMARY
          echo "- Config: settings.test.s3.yaml" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker/docker-compose.test-extended.yaml --profile s3-tests down --remove-orphans

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == ''
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run performance tests
        run: |
          echo "⚡ Запуск performance тестов..."

          # Устанавливаем переменные окружения для performance тестов
          export TEST_DB_DRIVER=postgresql
          export TEST_DB_HOST=localhost
          export TEST_DB_PORT=5433
          export TEST_DB_NAME=avatar_gen_test
          export TEST_DB_USER=test_user
          export TEST_DB_PASSWORD=test_password
          export TEST_STORAGE_TYPE=local
          export TEST_LOG_LEVEL=warn

          # Запускаем performance тесты
          docker compose -f docker/docker-compose.test-extended.yaml --profile performance-tests up --build --abort-on-container-exit avatar-backend-performance

          echo "✅ Performance тесты завершены"

      - name: Collect test results
        if: always()
        run: |
          docker compose -f docker/docker-compose.test-extended.yaml logs avatar-backend-performance > performance-test-results.log

          echo "## ⚡ Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Database: PostgreSQL" >> $GITHUB_STEP_SUMMARY
          echo "- Storage: Local filesystem" >> $GITHUB_STEP_SUMMARY
          echo "- Log Level: WARN (optimized)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker/docker-compose.test-extended.yaml --profile performance-tests down --remove-orphans

  matrix-tests:
    name: Custom Matrix Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'matrix' || github.event.inputs.test_type == ''
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Parse custom config
        id: custom-config
        run: |
          CUSTOM_CONFIG='${{ github.event.inputs.config_custom }}'
          echo "CUSTOM_CONFIG=$CUSTOM_CONFIG" >> $GITHUB_OUTPUT

          if [ "$CUSTOM_CONFIG" != "{}" ] && [ "$CUSTOM_CONFIG" != "" ]; then
            echo "Parsing custom configuration: $CUSTOM_CONFIG"
            echo "$CUSTOM_CONFIG" | jq -r 'to_entries[] | "export \(.key)=\(.value)"' > custom_env.sh
            echo "CUSTOM_ENV_FILE=custom_env.sh" >> $GITHUB_OUTPUT
          else
            echo "CUSTOM_ENV_FILE=" >> $GITHUB_OUTPUT
          fi

      - name: Run custom matrix tests
        run: |
          echo "🔄 Запуск кастомных матричных тестов..."

          # Загружаем кастомные переменные если есть
          if [ -n "${{ steps.custom-config.outputs.CUSTOM_ENV_FILE }}" ] && [ -f "${{ steps.custom-config.outputs.CUSTOM_ENV_FILE }}" ]; then
            echo "Loading custom environment variables..."
            source ${{ steps.custom-config.outputs.CUSTOM_ENV_FILE }}
            cat ${{ steps.custom-config.outputs.CUSTOM_ENV_FILE }}
          fi

          # Устанавливаем переменные по умолчанию
          export TEST_DB_DRIVER=${TEST_DB_DRIVER:-postgresql}
          export TEST_STORAGE_TYPE=${TEST_STORAGE_TYPE:-local}

          # Запускаем кастомные матричные тесты
          docker compose -f docker/docker-compose.test-extended.yaml --profile matrix-tests up --build --abort-on-container-exit test-runner

          echo "✅ Кастомные матричные тесты завершены"

      - name: Collect test results
        if: always()
        run: |
          docker compose -f docker/docker-compose.test-extended.yaml logs test-runner > matrix-test-results.log

          echo "## 🔄 Custom Matrix Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Custom Config: ${{ github.event.inputs.config_custom }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker/docker-compose.test-extended.yaml --profile matrix-tests down --remove-orphans
