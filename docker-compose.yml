services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: avatar-gen-postgres
    environment:
      POSTGRES_DB: avatar_gen
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d avatar_gen"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - avatar-gen-network

  # Avatar Backend Service
  avatar-backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: avatar-gen-backend
    ports:
      - "3000:3000"
    volumes:
      - ./backend/storage:/app/storage
      - ./backend/prisma/storage:/app/prisma/storage
      - ./backend/settings.yaml:/app/settings.yaml
    environment:
      - NODE_ENV=production
      # For SQLite (default)
      - DATABASE_PROVIDER=sqlite
      - DATABASE_URL=file:./prisma/storage/database.sqlite
      # For PostgreSQL (uncomment to use PostgreSQL)
      # - DATABASE_PROVIDER=postgresql
      # - DATABASE_URL=postgresql://postgres:password@postgres:5432/avatar_gen
      - CONFIG_PATH=./settings.yaml
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - avatar-gen-network

volumes:
  postgres_data:
    driver: local

networks:
  avatar-gen-network:
    driver: bridge

