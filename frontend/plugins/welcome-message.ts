import type { Plugin } from 'vite'
import QRCode from 'qrcode'
import { MessageBuffer } from './message-buffer'
import { readFileSync } from 'fs'
import { join } from 'path'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ package.json
 */
function getPackageVersion(): string {
  try {
    const packagePath = join(process.cwd(), 'package.json')
    const packageContent = readFileSync(
      packagePath,
      'utf-8',
    )
    const packageData = JSON.parse(packageContent)
    return packageData.version || 'unknown'
  } catch {
    return 'unknown'
  }
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è Vite, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ dev —Å–µ—Ä–≤–µ—Ä–∞
 * @param options - –û–ø—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞
 * @param options.message - –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 * @param options.color - –¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
 * @returns Vite –ø–ª–∞–≥–∏–Ω
 */
export function welcomeMessage(
  options: {
    message?: string
    color?:
      | 'red'
      | 'green'
      | 'yellow'
      | 'blue'
      | 'magenta'
      | 'cyan'
      | 'white'
  } = {},
): Plugin {
  const {
    message = 'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ React SDK!',
    color = 'cyan',
  } = options

  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
  }

  const resetColor = '\x1b[0m'
  const selectedColor = colors[color]

  return {
    name: 'welcome-message',
    configureServer() {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
      const generateQRCode = async (
        url: string,
      ): Promise<string[]> => {
        try {
          const qrString = await QRCode.toString(url, {
            type: 'terminal',
            small: true,
            width: 1,
            margin: 0,
          })
          return qrString
            .split('\n')
            .filter((line) => line.trim())
        } catch {
          return []
        }
      }

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∞
      const createWelcomeMessage = (
        qrCodeLines: string[],
      ): string => {
        const buffer = new MessageBuffer(80, 35)

        // –†–∞–º–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        buffer.addCenteredText(message, 1)

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏—è—Ö
        const reactSDKVersion = getPackageVersion()
        buffer.addCenteredText(
          `üì¶ React SDK v${reactSDKVersion} | üîß Node.js ${process.version}`,
          3,
        )

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        buffer.addCenteredText(
          'üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:12965',
          4,
        )
        buffer.addCenteredText(
          'üìö Storybook –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:6006',
          5,
        )

        // –î–æ–±–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (qrCodeLines.length > 0) {
          buffer.addCenteredText(
            'üì± QR-–∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:',
            7,
          )

          // –†–∞–∑–º–µ—â–∞–µ–º QR-–∫–æ–¥ –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –±–µ–∑ ANSI –∫–æ–¥–æ–≤
          const getVisualWidth = (text: string): number => {
            // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±: —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã ESC –∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞ –Ω–∏–º–∏ –∫–æ–¥—ã
            let cleanText = text
            let escIndex = cleanText.indexOf('\x1b')
            while (escIndex !== -1) {
              const endIndex = cleanText.indexOf(
                'm',
                escIndex,
              )
              if (endIndex !== -1) {
                cleanText =
                  cleanText.slice(0, escIndex) +
                  cleanText.slice(endIndex + 1)
              } else {
                break
              }
              escIndex = cleanText.indexOf('\x1b')
            }
            return cleanText.length
          }

          // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ QR-–∫–æ–¥–∞
          const qrCodeWidth = Math.max(
            ...qrCodeLines.map((line) =>
              getVisualWidth(line),
            ),
          )
          const qrStartColumn = Math.max(
            0,
            Math.floor((80 - qrCodeWidth) / 2),
          )

          buffer.addQRCode(qrCodeLines, qrStartColumn, 9)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const finalMessageLine =
          qrCodeLines.length > 0
            ? 9 + qrCodeLines.length + 2
            : 7
        buffer.addCenteredText(
          'üõ†Ô∏è –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!',
          finalMessageLine,
        )

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –≤—ã–π—Ç–∏
        buffer.addCenteredText(
          'üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –∏–ª–∏ Q –¥–ª—è –≤—ã—Ö–æ–¥–∞',
          finalMessageLine + 2,
        )

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const totalHeight = Math.max(
          finalMessageLine + 6,
          qrCodeLines.length > 0
            ? 8 + qrCodeLines.length + 7
            : finalMessageLine + 6,
        )
        const trimmedBuffer = buffer.slice(
          0,
          totalHeight,
          0,
          80,
        )

        return trimmedBuffer.render(
          selectedColor,
          resetColor,
        )
      }

      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ Vite
      const originalStdoutWrite = process.stdout.write
      let viteOutputSuppressed = false
      let qrCodeLines: string[] = []

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ stdout –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      const restoreOriginalOutput = () => {
        process.stdout.write = originalStdoutWrite
        if (process.stdin.isTTY) {
          process.stdin.setRawMode(false)
          process.stdin.pause()
        }

        // –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        originalStdoutWrite.call(
          process.stdout,
          '\x1b[2J\x1b[H',
        )
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      process.on('SIGINT', () => {
        restoreOriginalOutput()
        process.exit(0)
      }) // Ctrl+C
      process.on('SIGTERM', restoreOriginalOutput) // –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on('exit', restoreOriginalOutput) // –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
      const handleKeyPress = (key: string) => {
        if (key === 'q' || key === 'Q') {
          restoreOriginalOutput()
          process.exit(0)
        } else if (key === '\u0003') {
          // Ctrl+C
          restoreOriginalOutput()
          process.exit(0)
        }
      }

      if (process.stdin.isTTY) {
        process.stdin.setRawMode(true)
        process.stdin.resume()
        process.stdin.setEncoding('utf8')
        process.stdin.on('data', handleKeyPress)
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –∑–∞—Ä–∞–Ω–µ–µ
      generateQRCode('http://192.168.0.103:12965').then(
        (lines) => {
          qrCodeLines = lines
        },
      )

      process.stdout.write = function (
        chunk: string | Buffer | Uint8Array,
        encoding?:
          | BufferEncoding
          | ((err?: Error | null) => void),
        callback?: (err?: Error | null) => void,
      ) {
        const output = chunk.toString()

        // –ü–æ–¥–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ Vite
        if (
          output.includes('VITE') ||
          output.includes('ready in') ||
          output.includes('Local:') ||
          output.includes('Network:') ||
          output.includes('press h + enter') ||
          output.includes('Visit page on mobile') ||
          output.includes('‚ûú') ||
          output.includes('http://localhost:') ||
          output.includes('http://172.') ||
          output.includes('http://26.') ||
          output.includes('‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ') ||
          output.includes('‚ñà')
        ) {
          if (!viteOutputSuppressed) {
            viteOutputSuppressed = true

            // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º welcome message
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ ANSI –∫–æ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            originalStdoutWrite.call(
              this,
              '\x1b[3J\x1b[2J\x1b[H\x1b[0m',
            )

            // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∞
            const welcomeMessage =
              createWelcomeMessage(qrCodeLines)
            originalStdoutWrite.call(this, welcomeMessage)
            originalStdoutWrite.call(this, '\n')
          }
          return true
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã Vite
        if (
          output.includes('stopped') ||
          output.includes('shutting down') ||
          output.includes('server closed') ||
          output.includes('process exited')
        ) {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
          restoreOriginalOutput()
          if (typeof encoding === 'function') {
            return originalStdoutWrite.call(
              this,
              chunk,
              undefined,
              encoding,
            )
          }
          return originalStdoutWrite.call(
            this,
            chunk,
            encoding,
            callback,
          )
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (typeof encoding === 'function') {
          return originalStdoutWrite.call(
            this,
            chunk,
            undefined,
            encoding,
          )
        }
        return originalStdoutWrite.call(
          this,
          chunk,
          encoding,
          callback,
        )
      }
    },
  }
}
