services:
  # Nginx Gateway (Reverse Proxy)
  gateway:
    build:
      context: ../gateway
      dockerfile: Dockerfile
    container_name: avatar-gen-gateway
    ports:
      - '12745:12745'
    volumes:
      - ../gateway/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../gateway/configs/static:/usr/share/nginx/html/static:ro
      - ../gateway/logs:/var/log/nginx
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - internal
      - external

  # PostgreSQL Database (профиль: postgresql)
  postgres:
    image: postgres:17-alpine
    container_name: avatar-gen-postgres
    profiles:
      - postgresql
    environment:
      POSTGRES_DB: avatar_gen
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d avatar_gen']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend-db

  # Avatar Backend Service
  # По умолчанию: SQLite + Local Storage
  #
  # Конфигурация через YAML файлы (settings.yaml, settings.production.yaml)
  # База данных и хранилище настраиваются в YAML конфигурации
  #
  # Примеры:
  # 1. SQLite + Local: docker-compose up
  # 2. PostgreSQL (контейнер): docker-compose --profile postgresql up
  # 3. PostgreSQL (внешняя): Настроить в settings.yaml
  avatar-backend:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
    container_name: avatar-gen-backend
    expose:
      - '3000'
    volumes:
      - ../backend/storage:/app/storage
      - ../backend/settings.yaml:/app/settings.yaml:ro
      - ../backend/settings.production.yaml:/app/settings.production.yaml:ro
      - ../backend/logs:/app/logs
      # Note: settings.local.yaml and settings.*.local.yaml are NOT mounted
      # If needed, create them manually and add explicit mount in docker-compose.override.yml
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - CONFIG_PATH=./settings.yaml
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal
      - backend-db

  # Frontend Service
  avatar-frontend:
    build:
      context: ..
      dockerfile: frontend/docker/Dockerfile
    container_name: avatar-gen-frontend
    expose:
      - '8080'
    volumes:
      - ../frontend/logs:/var/log/nginx
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - internal

volumes:
  postgres_data:
    driver: local
  certbot_data:
    driver: local
  certbot_www:
    driver: local

networks:
  # Внешняя сеть для gateway (доступ к интернету)
  external:
    external: true
    name: avatar-gen-external

  # Внутренняя сеть для gateway, backend и frontend
  internal:
    driver: bridge
    internal: false
    name: avatar-gen-internal

  # Внутренняя сеть для backend и базы данных
  backend-db:
    driver: bridge
    internal: true
    name: avatar-gen-backend-db
