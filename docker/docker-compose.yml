services:
  # Nginx Gateway (Reverse Proxy)
  gateway:
    build:
      context: ../gateway
      dockerfile: Dockerfile
    container_name: avatar-gen-gateway
    ports:
      - "80:80"
      - "12745:12745"
    volumes:
      - ../gateway/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../gateway/configs/static:/usr/share/nginx/html/static:ro
      - ../gateway/logs:/var/log/nginx
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - internal
      - external

  # PostgreSQL Database (только для профиля postgresql)
  postgres:
    image: postgres:17-alpine
    container_name: avatar-gen-postgres
    profiles:
      - postgresql
    environment:
      POSTGRES_DB: avatar_gen
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d avatar_gen"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend-db

  # Avatar Backend Service
  avatar-backend:
    build:
      context: ../backend
      dockerfile: docker/Dockerfile
    container_name: avatar-gen-backend
    expose:
      - "3000"
    volumes:
      - ../backend/storage:/app/storage
      - ../backend/settings.yaml:/app/backend/settings.yaml:ro
      - ../backend/settings.production.yaml:/app/backend/settings.production.yaml:ro
      - ../backend/logs:/app/logs
    environment:
      - NODE_ENV=production
      - CONFIG_PATH=./settings.yaml
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/avatar_gen
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal
      - backend-db

  # Frontend Service
  avatar-frontend:
    build:
      context: ../frontend
      dockerfile: docker/Dockerfile
    container_name: avatar-gen-frontend
    expose:
      - "8080"
    volumes:
      - ../frontend/logs:/var/log/nginx
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - internal

volumes:
  postgres_data:
    driver: local
  certbot_data:
    driver: local
  certbot_www:
    driver: local

networks:
  # Внешняя сеть для gateway (доступ к интернету)
  external:
    external: true
    name: avatar-gen-external
  
  # Внутренняя сеть для gateway, backend и frontend
  internal:
    driver: bridge
    internal: false
    name: avatar-gen-internal
  
  # Внутренняя сеть для backend и базы данных
  backend-db:
    driver: bridge
    internal: true
    name: avatar-gen-backend-db
