name: avatar-gen-test-extended

services:
  # ===========================================
  # BUILDERS
  # ===========================================
  backend-builder:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    profiles:
      - build-only
    container_name: avatar-gen-backend-builder
    command: ['echo', 'Builder image created']

  frontend-builder:
    build:
      context: ..
      dockerfile: frontend/docker/Dockerfile
    image: avatar-gen-test-frontend:latest
    profiles:
      - build-only
    container_name: avatar-gen-frontend-builder
    command: ['echo', 'Builder image created']

  gateway-builder:
    build:
      context: ../gateway
      dockerfile: Dockerfile
    image: avatar-gen-test-gateway:latest
    profiles:
      - build-only
    container_name: avatar-gen-gateway-builder
    command: ['echo', 'Builder image created']

  # ===========================================
  # INFRASTRUCTURE SERVICES
  # ===========================================
  minio:
    image: minio/minio:latest
    container_name: avatar-gen-minio-test
    profiles:
      - s3-storage
      - integration-tests
      - e2e-tests
      - s3-tests
    environment:
      MINIO_ROOT_USER: test-access-key
      MINIO_ROOT_PASSWORD: test-secret-key
      MINIO_DEFAULT_BUCKETS: avatar-gen-test
    ports:
      - '9000:9000' # MinIO API
      - '9001:9001' # MinIO Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - test-internal

  postgres-test:
    image: postgres:17-alpine
    container_name: avatar-gen-postgres-test
    profiles:
      - postgres-only
      - postgresql-storage
      - integration-tests
      - e2e-tests
      - postgres-tests
    environment:
      POSTGRES_DB: avatar_gen_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    ports:
      - '5433:5432'
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U test_user -d avatar_gen_test']
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - test-internal
    restart: 'no'

  # ===========================================
  # UNIT TESTS
  # ===========================================
  avatar-backend-unit:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-backend-unit-test
    profiles:
      - unit-tests
      - unit-only
    volumes:
      - ../backend/configs/settings.test.unit.yaml:/app/backend/settings.yaml:ro
      - ../backend/logs:/app/backend/logs
      - test_storage:/app/backend/storage
    environment:
      - NODE_ENV=test
      - CONFIG_PATH=./settings.yaml
      - TEST_LOG_LEVEL=error
    command: ['npm', 'run', 'test:unit']
    networks:
      - test-internal

  gateway-unit:
    build:
      context: ../gateway
      dockerfile: Dockerfile
    image: avatar-gen-test-gateway:latest
    container_name: avatar-gen-gateway-unit-test
    profiles:
      - unit-tests
      - unit-only
    depends_on:
      - avatar-backend-unit
    ports:
      - '12747:80'
    volumes:
      - ../gateway/configs/nginx.test.unit.conf:/etc/nginx/nginx.conf:ro
      - ../gateway/configs/static:/usr/share/nginx/html/static:ro
      - ../gateway/logs:/var/log/nginx
    networks:
      - test-internal

  # ===========================================
  # INTEGRATION TESTS
  # ===========================================
  avatar-backend-integration:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-backend-integration-test
    profiles:
      - integration-tests
      - integration-only
    depends_on:
      postgres-test:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ../backend/configs/settings.test.yaml:/app/backend/settings.yaml:ro
      - ../backend/logs:/app/backend/logs
    environment:
      - NODE_ENV=test
      - CONFIG_PATH=./settings.yaml
      - TEST_S3_ENDPOINT=http://minio:9000
      - TEST_S3_BUCKET=avatar-gen-test
      - TEST_S3_ACCESS_KEY=test-access-key
      - TEST_S3_SECRET_KEY=test-secret-key
      - TEST_S3_REGION=us-east-1
      - TEST_DB_HOST=postgres-test
      - TEST_DB_PORT=5432
      - TEST_DB_NAME=avatar_gen_test
      - TEST_DB_USER=test_user
      - TEST_DB_PASSWORD=test_password
    command: ['npm', 'run', 'test:integration']
    networks:
      - test-internal

  gateway-integration:
    build:
      context: ../gateway
      dockerfile: Dockerfile
    image: avatar-gen-test-gateway:latest
    container_name: avatar-gen-gateway-integration-test
    profiles:
      - integration-tests
      - integration-only
    depends_on:
      - avatar-backend-integration
    ports:
      - '12748:80'
    volumes:
      - ../gateway/configs/nginx.test.integration.conf:/etc/nginx/nginx.conf:ro
      - ../gateway/configs/static:/usr/share/nginx/html/static:ro
      - ../gateway/logs:/var/log/nginx
    networks:
      - test-internal

  # ===========================================
  # POSTGRES-SPECIFIC TESTS
  # ===========================================
  avatar-backend-postgres:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-backend-postgres-test
    profiles:
      - postgres-tests
    depends_on:
      postgres-test:
        condition: service_healthy
    volumes:
      - ../backend/configs/settings.test.postgres.yaml:/app/backend/settings.yaml:ro
      - ../backend/logs:/app/backend/logs
      - test_storage:/app/backend/storage
    environment:
      - NODE_ENV=test
      - CONFIG_PATH=./settings.yaml
      - TEST_DB_DRIVER=postgresql
      - TEST_DB_HOST=postgres-test
      - TEST_DB_PORT=5432
      - TEST_DB_NAME=avatar_gen_test
      - TEST_DB_USER=test_user
      - TEST_DB_PASSWORD=test_password
    command: ['npm', 'run', 'test:integration']
    networks:
      - test-internal

  # ===========================================
  # S3-SPECIFIC TESTS
  # ===========================================
  avatar-backend-s3:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-backend-s3-test
    profiles:
      - s3-tests
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ../backend/configs/settings.test.s3.yaml:/app/backend/settings.yaml:ro
      - ../backend/logs:/app/backend/logs
      - test_storage:/app/backend/storage
    environment:
      - NODE_ENV=test
      - CONFIG_PATH=./settings.yaml
      - TEST_STORAGE_TYPE=s3
      - TEST_S3_ENDPOINT=http://minio:9000
      - TEST_S3_BUCKET=avatar-gen-test
      - TEST_S3_ACCESS_KEY=test-access-key
      - TEST_S3_SECRET_KEY=test-secret-key
      - TEST_S3_REGION=us-east-1
    command: ['npm', 'run', 'test:integration']
    networks:
      - test-internal

  # ===========================================
  # E2E TESTS
  # ===========================================
  avatar-backend-e2e:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-backend-e2e-test
    profiles:
      - e2e-tests
      - e2e-only
    depends_on:
      postgres-test:
        condition: service_healthy
      minio:
        condition: service_healthy
    expose:
      - '3000'
    volumes:
      - ../backend/configs/settings.test.e2e.yaml:/app/backend/settings.yaml:ro
      - ../backend/logs:/app/backend/logs
      - test_storage:/app/backend/storage
    environment:
      - NODE_ENV=test
      - CONFIG_PATH=./settings.yaml
    command: ['npm', 'run', 'start:prod']
    networks:
      - test-internal

  avatar-frontend-e2e:
    build:
      context: ..
      dockerfile: frontend/docker/Dockerfile
    image: avatar-gen-test-frontend:latest
    container_name: avatar-gen-frontend-e2e-test
    profiles:
      - e2e-tests
      - e2e-only
    depends_on:
      - avatar-backend-e2e
    expose:
      - '8080'
    volumes:
      - ../frontend/logs:/var/log/nginx
    environment:
      - NODE_ENV=test
      - VITE_API_URL=http://avatar-backend-e2e:3000
    networks:
      - test-internal

  gateway-e2e:
    build:
      context: ../gateway
      dockerfile: Dockerfile
    image: avatar-gen-test-gateway:latest
    container_name: avatar-gen-gateway-e2e-test
    profiles:
      - e2e-tests
      - e2e-only
    depends_on:
      - avatar-frontend-e2e
      - avatar-backend-e2e
    ports:
      - '12746:12745'
    volumes:
      - ../gateway/configs/nginx.test.conf:/etc/nginx/nginx.conf:ro
      - ../gateway/configs/static:/usr/share/nginx/html/static:ro
      - ../gateway/logs:/var/log/nginx
    networks:
      - test-internal

  # ===========================================
  # TEST RUNNERS
  # ===========================================
  e2e-test-runner:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-e2e-test-runner
    profiles:
      - e2e-tests
      - e2e-full
    depends_on:
      - avatar-backend-e2e
      - avatar-frontend-e2e
      - gateway-e2e
    volumes:
      - ../backend/configs/settings.test.e2e.yaml:/app/backend/settings.yaml:ro
      - ../backend/logs:/app/backend/logs
      - test_storage:/app/backend/storage
    environment:
      - NODE_ENV=test
      - CONFIG_PATH=./settings.yaml
      - BACKEND_URL=http://avatar-backend-e2e:3000
      - GATEWAY_URL=http://gateway-e2e:80
    command: ['npm', 'run', 'test:e2e', '--verbose']
    networks:
      - test-internal

  e2e-health-runner:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-e2e-health-runner
    profiles:
      - e2e-health
    depends_on:
      - avatar-backend-e2e
      - avatar-frontend-e2e
      - gateway-e2e
    volumes:
      - ../backend/configs/settings.test.e2e.yaml:/app/backend/settings.yaml:ro
      - ../backend/logs:/app/backend/logs
      - test_storage:/app/backend/storage
    environment:
      - NODE_ENV=test
      - CONFIG_PATH=./settings.yaml
      - BACKEND_URL=http://avatar-backend-e2e:3000
      - GATEWAY_URL=http://gateway-e2e:80
    command: ['npm', 'run', 'test:e2e', '--testNamePattern=HealthController', '--verbose']
    networks:
      - test-internal

  test-runner:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-test-runner
    profiles:
      - matrix-tests
    volumes:
      - ../backend:/app/backend
      - ../backend/logs:/app/backend/logs
      - test_storage:/app/backend/storage
    environment:
      - NODE_ENV=test
    command: ['npm', 'run', 'test:matrix']
    networks:
      - test-internal

  # ===========================================
  # PERFORMANCE TESTS
  # ===========================================
  avatar-backend-performance:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
      target: builder
    image: avatar-gen-test-backend:builder
    container_name: avatar-gen-backend-performance-test
    profiles:
      - performance-tests
    depends_on:
      postgres-test:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ../backend/configs/settings.test.yaml:/app/backend/settings.yaml:ro
      - ../backend/logs:/app/backend/logs
      - test_storage:/app/backend/storage
    environment:
      - NODE_ENV=test
      - CONFIG_PATH=./settings.yaml
      - TEST_LOG_LEVEL=warn
    command: ['npm', 'run', 'test:performance']
    networks:
      - test-internal

volumes:
  postgres_test_data:
    driver: local
  minio_data:
    driver: local
  test_storage:
    driver: local

networks:
  test-internal:
    driver: bridge
    internal: false
    name: avatar-gen-test-internal
