name: ava-gen

services:
  gateway:
    build:
      context: ../gateway
      dockerfile: Dockerfile
    container_name: avatar-gen-gateway
    ports:
      - '12745:12745'
    volumes:
      - ../gateway/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../gateway/configs/static:/usr/share/nginx/html/static:ro
      - ../gateway/logs:/var/log/nginx
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - internal
      - external

  avatar-backend:
    build:
      context: ..
      dockerfile: backend/docker/Dockerfile
    container_name: avatar-gen-backend
    expose:
      - '3000'
    volumes:
      - ../backend/settings.production.local.yaml:/app/settings.yaml:ro
      - ../backend/logs:/app/logs
    environment:
      - NODE_ENV=production
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - internal

  avatar-frontend:
    build:
      context: ..
      dockerfile: frontend/docker/Dockerfile
    container_name: avatar-gen-frontend
    expose:
      - '8080'
    volumes:
      - ../frontend/logs:/var/log/nginx
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - internal

volumes:
  certbot_data:
    driver: local
  certbot_www:
    driver: local

networks:
  external:
    external: true
    name: avatar-gen-external

  internal:
    driver: bridge
    internal: false
    name: avatar-gen-internal
